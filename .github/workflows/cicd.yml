name: Desafio Técnico de QA - DemoQA Automation
on: [push, pull_request]

jobs:
  test:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Chrome and Driver
      shell: pwsh
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Write-Host "Iniciando instalação do Chrome..."
        Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile chrome_installer.exe
        Start-Process -FilePath .\chrome_installer.exe -Args "/silent /install" -Wait
        Remove-Item chrome_installer.exe
        Write-Host "Chrome instalado com sucesso"
        python -m pip install webdriver-manager
        Write-Host "WebDriver Manager instalado"

    - name: Install base dependencies
      run: |
        Write-Host "Atualizando pip, setuptools e wheel..."
        python -m pip install --upgrade pip setuptools wheel
        Write-Host "Instalando Selenium..."
        python -m pip install selenium==4.18.1
        Write-Host "Instalando Pytest e plugins..."
        python -m pip install pytest pytest-html pytest-metadata pytest-rerunfailures
        Write-Host "Instalando Requests..."
        python -m pip install requests
        Write-Host "Instalando Faker..."
        python -m pip install faker==24.9.0

    - name: Install project dependencies
      run: |
        Write-Host "Instalando dependências do projeto..."
        pip install -r requirements.txt
        Write-Host "Listando pacotes instalados:"
        pip list

    - name: Create pytest configuration
      shell: pwsh
      run: |
        Write-Host "Criando configuração do Pytest..."
        $config = @'
        [pytest]
        addopts =
            -v
            --html=relatorio_teste.html
            --self-contained-html
            --capture=sys
            --show-capture=log
            --tb=short
        reruns = 3
        reruns_delay = 1
        metadata =
            Runner: GitHub Actions
            Python: 3.9
            Platform: Windows
            Project: DemoQA Automation
        '@
        $config | Out-File -FilePath pytest.ini -Encoding utf8 -Force
        Write-Host "Configuração do Pytest criada"

    - name: Create utils directory and Chrome options file
      shell: pwsh
      run: |
        Write-Host "Criando diretório utils..."
        New-Item -ItemType Directory -Force -Path utils
        Write-Host "Criando arquivo de configuração do Chrome..."
        $chromeOptions = @'
        from selenium.webdriver.chrome.options import Options

        def get_chrome_options():
            options = Options()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-notifications')
            options.add_argument('--disable-popup-blocking')
            options.add_argument('--disable-infobars')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-software-rasterizer')
            options.add_argument('--ignore-certificate-errors')
            options.add_argument('--start-maximized')
            options.add_argument('--window-size=1920,1080')
            options.add_experimental_option('excludeSwitches', ['enable-automation'])
            options.add_experimental_option('useAutomationExtension', False)
            return options
        '@
        $chromeOptions | Out-File -FilePath utils/chrome_options.py -Encoding utf8 -Force
        Write-Host "Arquivo de configuração do Chrome criado"

    - name: List project structure
      shell: pwsh
      run: |
        Write-Host "Estrutura do projeto:"
        Get-ChildItem -Recurse | Select-Object FullName

    - name: Run API Tests
      run: |
        Write-Host "Iniciando testes de API..."
        pytest api_tests/ -v --html=relatorio_api_teste.html || echo "Testes de API falharam, mas continuando..."

    - name: Run Frontend Tests
      run: |
        Write-Host "Iniciando testes de Frontend..."
        pytest frontend_tests/ -v --html=relatorio_frontend_teste.html || echo "Testes de Frontend falharam, mas continuando..."

    - name: Process and upload reports
      shell: pwsh
      run: |
        Write-Host "Processando relatórios..."
        $reports = @("relatorio_api_teste.html", "relatorio_frontend_teste.html")
        foreach ($report in $reports) {
            if (Test-Path $report) {
                Write-Host "Processando $report..."
                $content = Get-Content -Path $report -Raw
                $content = $content -replace '<\s*br\s*/?>', '<br>' -replace '<\s*/\s*div\s*>', '</div>'
                $processedName = "processed_$report"
                $content | Out-File -FilePath $processedName -Encoding utf8 -Force
                Write-Host "Processado $report para $processedName"
            } else {
                Write-Warning "Arquivo $report não encontrado!"
            }
        }

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: relatorios-automacao
        path: |
          processed_relatorio_api_teste.html
          processed_relatorio_frontend_teste.html
        if-no-files-found: error

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: |
          *.log
          *.txt
        if-no-files-found: ignore
